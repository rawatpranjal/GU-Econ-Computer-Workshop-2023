R Programming Guide for Beginners:

1. Introduction:

   - R is a programming language and environment designed for statistical computing and data analysis.
   - It is widely used in data science, machine learning, and statistical analysis.

2. RStudio Installation:

   - RStudio is a popular integrated development environment (IDE) for R.
   - Download and install R from the official R website: https://cran.r-project.org/
   - Download and install RStudio from the official RStudio website: https://www.rstudio.com/products/rstudio/download/
   - Launch RStudio after installation.

3. Basic Operations:

   - Use the R console in RStudio to execute R code.
   - Example:
     ```R
     # Print "Hello, World!"
     print("Hello, World!")
     ```

4. Variables:

   - Assign values to variables using `<-` or `=`.
   - Example:
     ```R
     name <- "Alice"
     age <- 30
     ```

5. Data Types:

   - R has various data types, including:
     - `numeric` for numbers (e.g., 10)
     - `character` for text (e.g., "Hello")
     - `logical` for boolean values (e.g., TRUE or FALSE)
   - Example:
     ```R
     number <- 42
     name <- "Bob"
     is_happy <- TRUE
     ```

6. Basic Math Operations:

   - Perform arithmetic operations like addition, subtraction, multiplication, and division.
   - Example:
     ```R
     result <- 10 + 5
     ```

7. Comments:

   - Use `#` to add comments in your code (comments are not executed).
   - Example:
     ```R
     # This is a comment
     ```

8. User Input:

   - Use `readline()` to get user input.
   - Example:
     ```R
     name <- readline("Enter your name: ")
     ```

9. Conditional Statements:

   - Use `if`, `else if`, and `else` for decision making.
   - Example:
     ```R
     if (age < 18) {
         print("You are a minor.")
     } else {
         print("You are an adult.")
     }
     ```

10. Loops:

    - Use `for` loops for iterating over sequences.
    - Use `while` loops for repeated execution.
    - Example:
      ```R
      for (i in 1:5) {
          print(i)
      }
      ```

11. Lists:

    - Lists are collections of items.
    - Example:
      ```R
      fruits <- c("apple", "banana", "cherry")
      ```

12. Functions:

    - Define and use functions to organize code.
    - Example:
      ```R
      greet <- function(name) {
          print(paste("Hello,", name, "!"))
      }
      ```

13. Error Handling:

    - Use `tryCatch()` to handle errors.
    - Example:
      ```R
      tryCatch(
          result <- 10 / 0,
          error = function(e) {
              print("Error: Division by zero")
          }
      )
      ```

14. Packages and Libraries:

    - R has a vast ecosystem of packages for specialized tasks.
    - Use `install.packages()` to install packages.
    - Example:
      ```R
      install.packages("ggplot2")
      ```

    - Use `library()` to load packages.
    - Example:
      ```R
      library(ggplot2)
      ```
